from aiogram import types
from loader import dp, db, bot
from keyboards.inline import ordering
from states.user_orders import UserOrders
from states.ordering import OrderingState


@dp.message_handler(text=['üõç –ó–∞–∫–∞–∑–∞—Ç—å'])
async def order(message: types.Message):
    categories = await db.list_categories()

    if len(categories) == 0:
        await message.answer(
            "–ú–µ–Ω—é –ø—É—Å—Ç–æ üòï\n"
            "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ª–∏–±–æ –º—ã –≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤–æ–µ –º–µ–Ω—é, –ª–∏–±–æ –≤–∞–º —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É üòå\n\n"
            "–û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ Uzum Tezkor –∏–ª–∏ –∂–µ –Ø–Ω–¥–µ–∫—Å.–ï–¥–∞!\n\n"
            "<b><a href='https://www.uzumtezkor.uz/ru/restaurants/94b3642e-5147-4afb-a026-c7f54c80a108'>Uzum Tezkor</a></b>\n"
            "<b><a href='https://eda.yandex.ru/restaurant/like_2kzq8?utm_campaign=superapp_taxi_web&utm_medium=referral&utm_source=rst_shared_link'>–Ø–Ω–¥–µ–∫—Å.–ï–¥–∞</a></b>\n\n",
            disable_web_page_preview=True
        )
        return

    categories_kb = await ordering.list_categories(categories)

    await OrderingState.choose_category.set()
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
        reply_markup=categories_kb
    )


@dp.message_handler(text=['‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'])
async def review(message: types.Message):
    await message.answer('–°–∫–æ—Ä–æ!')


@dp.message_handler(text=['üéâ –ê–∫—Ü–∏—è'])
async def shares(message: types.Message):
    await message.answer('–°–∫–æ—Ä–æ!')


@dp.message_handler(text=['üèò –§–∏–ª–∏–∞–ª—ã'])
async def branches(message: types.Message):
    await message.answer('–°–∫–æ—Ä–æ!')


@dp.message_handler(text=['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
async def settings(message: types.Message):
    await message.answer('–°–∫–æ—Ä–æ!')


@dp.message_handler(text=['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'])
async def my_orders(message: types.Message):
    telegram_id = message.from_user.id
    orders = await db.list_user_orders(telegram_id)
    
    msg = '<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>'
    orders_kb = types.InlineKeyboardMarkup(row_width=2)

    for order in orders:
        orders_kb.insert(
            types.InlineKeyboardButton(
                text=f"‚Ññ{order[0]} - {order[-1]} —Å—É–º",
                callback_data=str(order[0])
            )
        )

    btn_quit = types.InlineKeyboardButton(
        text='–ó–∞–∫—Ä—ã—Ç—å',
        callback_data='quit'
    )
    orders_kb.row(btn_quit)

    await message.answer(text=msg, reply_markup=orders_kb)
    await UserOrders.list.set()


@dp.callback_query_handler(text='quit', state=UserOrders.list)
async def quit_order_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "<i>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤</i>",
        reply_markup=None
    )


@dp.callback_query_handler(state=UserOrders.list)
async def open_order(call: types.CallbackQuery):
    order_id = int(call.data)
    order = await db.select_order(order_id=order_id)

    btn_quit = types.InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è',
        callback_data='quit'
    )
    order_kb = types.InlineKeyboardMarkup(row_width=2)
    order_kb.row(btn_quit)

    await call.message.edit_text(order[1], reply_markup=order_kb)
    await UserOrders.certain_order.set()


@dp.callback_query_handler(text='quit', state=UserOrders.certain_order)
async def quit_order_menu(call: types.CallbackQuery):
    telegram_id = call.from_user.id
    orders = await db.list_user_orders(telegram_id)
    
    msg = '<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>'
    orders_kb = types.InlineKeyboardMarkup(row_width=2)

    for order in orders:
        orders_kb.insert(
            types.InlineKeyboardButton(
                text=f"‚Ññ{order[0]} - {order[-1]} —Å—É–º",
                callback_data=str(order[0])
            )
        )

    btn_quit = types.InlineKeyboardButton(
        text='–ó–∞–∫—Ä—ã—Ç—å',
        callback_data='quit'
    )
    orders_kb.row(btn_quit)

    await call.message.edit_text(text=msg, reply_markup=orders_kb)
    await UserOrders.list.set()

@dp.message_handler(text=['‚ÑπÔ∏è –û –Ω–∞—Å'])
async def about_us(message: types.Message):
    await message.answer(
        '<b>Like Sushi</b> ‚Äî —ç—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ —è–ø–æ–Ω—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π.\n\n'
        '–ù–∞—à–∏ —Å—É—à–∏ –∏ —Ä–æ–ª–ª—ã —Å–æ–∑–¥–∞–Ω—ã —Å –ª—é–±–æ–≤—å—é –∫ –¥–µ—Ç–∞–ª—è–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –∫—É—Å–æ—á–µ–∫ –ø—Ä–∏–Ω–æ—Å–∏–ª —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.\n\n'
        '–ó–∞–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∫—É—Å–æ–º –≤–æ—Å—Ç–æ–∫–∞!'
    )
