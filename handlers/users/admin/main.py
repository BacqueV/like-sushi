from aiogram import types
from loader import dp, db, bot
import pandas as pd
from filters.is_admin import IsAdminFilter
from filters.is_manager import IsManagerFilter
import asyncio
from aiogram.dispatcher import FSMContext


@dp.message_handler(IsAdminFilter(is_admin=True), text="/userlist")
async def get_all_users(message: types.Message):
    users = await db.select_all_users()
    telegram_id = []
    name = []
    username = []
    for user in users:
        telegram_id.append(user[3])
        name.append(user[1])
        username.append(user[2])
    data = {
        "Telegram ID": telegram_id,
        "Name": name,
        "Username": username
    }
    pd.options.display.max_rows = 10000
    df = pd.DataFrame(data)
    if len(df) > 50:
        for x in range(0, len(df), 50):
            await bot.send_message(message.chat.id, df[x:x + 50])
    else:
        await bot.send_message(message.chat.id, df)


@dp.message_handler(IsAdminFilter(is_admin=True), commands='profile')
async def get_user_profile(message: types.Message):
    user_data = message.get_args()
    
    if user_data:
        try:

            user = await db.select_user(telegram_id=int(user_data))
            if user:
                await message.reply(
                    f"<a href='tg://user?id={user_data}'>–°—Å—ã–ª–∫–∞</a> –Ω–∞ "
                    f"–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href='tg://user?id={user_data}'>{user[1]}</a>"
                )
            else:
                await message.reply("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

        except ValueError:

            user = await db.select_user(username=user_data)
            if user:
                await message.reply(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_data}")
            else:
                await message.reply("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    else:
        await message.reply(
            "–ù–∞–ø–∏—à–∏—Ç–µ <b>Telegram ID</b> –∏–ª–∏ –∂–µ <b>Username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å!\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å <b>–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b> –≤–≤–µ–¥–∏—Ç–µ /userlist –∏, –µ—Å–ª–∏ –ø–æ–∑–≤–æ–ª—è—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        )


@dp.message_handler(IsAdminFilter(is_admin=True), text="/managerlist")
async def get_managers(message: types.Message):
    users = await db.manager_list()
    telegram_id = []
    name = []

    for user in users:
        telegram_id.append(user[3])
        name.append(user[1])

    data = {
        "Telegram ID": telegram_id,
        "Name": name
    }

    pd.options.display.max_rows = 10000
    df = pd.DataFrame(data)

    chunk_size = 50
    if len(df) > chunk_size:
        for x in range(0, len(df), chunk_size):
            await bot.send_message(message.chat.id, df[x:x + chunk_size].to_string(index=False))
    else:
        await bot.send_message(message.chat.id, df.to_string(index=False))


@dp.message_handler(IsAdminFilter(is_admin=True), commands='manageradd')
async def add_manager(message: types.Message):
    if message.get_args():

        try:
            telegram_id = int(message.get_args())
            await dp.bot.send_message(telegram_id, "–í–∞–º –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä–∞!")
            await db.add_manager(telegram_id)
            await message.reply("–¢–µ–ø–µ—Ä—å –æ–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!")
        except Exception as exception:
            await message.reply(
                f"<b>{str(exception)}</b>\n\n"
                "–û—à–∏–±–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤ —Ç–æ–º —á—Ç–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id, –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç!"
            )
    else:
        await message.reply("–ù–∞–ø–∏–∏—à–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π!")


@dp.message_handler(IsAdminFilter(is_admin=True), commands='managerremove')
async def remove_admin(message: types.Message):
    if message.get_args():

        try:
            telegram_id = int(message.get_args())
            await dp.bot.send_message(telegram_id, "–í—ã –±—ã–ª–∏ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω—ã —Å –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!")
            await db.remove_manager(telegram_id)
            await message.reply("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω —Å –ø–æ–∑–∏—Ü–∏–∏!")
        except Exception as exception:
            await message.reply(
                f"<b>{str(exception)}</b>\n\n"
                "–û—à–∏–±–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤ —Ç–æ–º —á—Ç–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id, –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç!"
            )
    else:
        await message.reply("–ù–∞–ø–∏–∏—à–∏ —Ç–µ–ª–µ–≥—Ä–∞–º id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π!")


@dp.message_handler(commands='orders')
async def list_orders(message: types.Message):
    is_admin = await IsAdminFilter(is_admin=True).check(message)
    is_manager = await IsManagerFilter(is_manager=True).check(message)
    
    if is_admin or is_manager:

        orders = await db.list_all_orders()

        if len(orders) == 0:
            await message.reply("<b>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤!</b>")
            return

        response = '<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>\n\n'
        unprocessed_orders_kb = types.InlineKeyboardMarkup(row_width=1)

        for order in orders:
            if order[3]:  # has been processed
                response += f"–ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚Äî <b>[{order[-1]}]</b> {order[-2]}\n"
            else:  # has not been processed yet
                unprocessed_orders_kb.insert(
                    types.InlineKeyboardButton(
                        text=f"–ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚Äî [{order[-1]}] {order[-2]}",
                        callback_data=order[0]
                    )
                )

        num_buttons = sum(len(row) for row in unprocessed_orders_kb.inline_keyboard)
        
        if num_buttons != 0:
            response += "\n<b>–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>"
            await message.answer(response, reply_markup=unprocessed_orders_kb)
        else:
            await message.answer(response)
            await asyncio.sleep(.5)
            await message.answer("<b>–í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</b>")


@dp.message_handler(commands='order')
async def list_orders(message: types.Message):
    is_admin = await IsAdminFilter(is_admin=True).check(message)
    is_manager = await IsManagerFilter(is_manager=True).check(message)
    
    if is_admin or is_manager:
        try:
            order_id = int(message.get_args())
            order = await db.select_order(order_id=order_id)
            await message.reply(order[1])
        except (ValueError, TypeError):
            await message.reply("–ó–Ω–∞—á–µ–Ω–∏–µ <b>ID</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö ü§î")


@dp.message_handler(commands='clean', state='*')
async def clean_state(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å!")
