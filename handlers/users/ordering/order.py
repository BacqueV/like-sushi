from aiogram import types
from loader import dp, db, bot
from aiogram.dispatcher import FSMContext
from keyboards.default import userdata, main_menu
from keyboards.inline import ordering
from states.ordering import OrderingState
import aiohttp
import asyncio
from datetime import datetime


async def get_address_from_coordinates(latitude, longitude, fsm: FSMContext):
    url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}&accept-language=ru"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                address_data = data.get("address", {})
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é
                country = address_data.get("country", "")
                state = address_data.get("state", "")
                city = address_data.get("city", address_data.get("town", address_data.get("village", "")))
                street = address_data.get("road", "")
                house_number = address_data.get("house_number", "")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await fsm.update_data(latitude=latitude)
                await fsm.update_data(longitude=longitude)

                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                address_parts = [country, state, city, street]
                if house_number:
                    address_parts.append(house_number)
                
                # –°–æ–µ–¥–∏–Ω—è–µ–º –∞–¥—Ä–µ—Å–Ω—ã–µ —á–∞—Å—Ç–∏
                formatted_address = ", ".join(part for part in address_parts if part)
                await fsm.update_data(address=formatted_address)
                return formatted_address
            return None


async def pre_check(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    telegram_id = data.get('telegram_id')
    address = data.get('address')
    phone = data.get('phone')

    basket = await db.order_meals(telegram_id)

    event_time = datetime.now().replace(second=0, microsecond=0)
    response = f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑</b>:\n\n<b>–î–∞—Ç–∞:</b> {event_time}\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> 20000\n"
    total_cost = 0

    for record in basket:
        meal = await db.select_meal(meal_id=record['meal_id'])
        name = meal[2]
        
        total_cost += record['total_cost_sum']
        
        response += f"<b>{name}</b> x {record['amount_sum']} = {record['total_cost_sum']}" + \
        (f"\n{record['info']}\n" if record['info'] else '\n')
    
    await state.update_data(total_cost=total_cost)
    await OrderingState.order.set()

    response += f'\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: </b>{address}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone}\n\n<b>–ò—Ç–æ–≥–æ:</b> {int(total_cost) + 20000}'

    await state.update_data(info=response[25:])
    await message.answer(response, reply_markup=ordering.order_kb)


# START
@dp.callback_query_handler(text='pre_check', state=OrderingState.basket)
async def check_order_info(call: types.CallbackQuery, state: FSMContext):
    await OrderingState.pre_check.set()

    telegram_id = call.from_user.id
    phone = await db.check_number(telegram_id)

    await state.update_data(telegram_id=telegram_id)


    await call.message.edit_text('<i>–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏...</i>', reply_markup=None)
    
    if phone:
        await state.update_data(phone=phone)
        locations = await db.check_locations(telegram_id)

        if locations == 0:
            await call.message.answer(
                "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞</b>",
                reply_markup=userdata.send_location_kb
            )
        else:
            locations_kb = await userdata.list_locations(telegram_id)
            await call.message.answer(
                "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞</b>",
                reply_markup=locations_kb
            )
    else:
        await call.message.answer("–ù–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!", reply_markup=userdata.phone_keyboard)


@dp.message_handler(content_types=types.ContentType.CONTACT, state=OrderingState.pre_check)
async def handle_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    telegram_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await db.save_phone_number(telegram_id, phone_number, message.from_user.full_name)
    await state.update_data(phone_number=phone_number)

    await state.update_data(phone=phone_number)
    await message.answer("<i>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</i>", reply_markup=types.ReplyKeyboardRemove())

    locations = await db.check_locations(telegram_id)
    if locations == 0:
        await message.answer(
            "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞</b>",
            reply_markup=userdata.send_location_kb
        )
    else:
        locations_kb = await userdata.list_locations(telegram_id)
        await message.answer(
            "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞</b>",
            reply_markup=locations_kb
        )


@dp.message_handler(content_types=types.ContentType.LOCATION, state=OrderingState.pre_check)
async def find_location(message: types.Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    address = await get_address_from_coordinates(latitude, longitude, state)
    
    if address:
        await message.answer(
            f"–í–∞—à –∞–¥—Ä–µ—Å:\n" + \
            f"üìç <b>{address}</b>\n" + \
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å!",
            reply_markup=userdata.manage_location_kb
        )
    else:
        await state.update_data(address='–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç')
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å.\n" + \
            "–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø–∏—à–µ—Ç –∞–¥—Ä–µ—Å —Å–∞–º"
        )
        await pre_check(message, state)


@dp.message_handler(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state=OrderingState.pre_check)
async def quit_location_managment(message: types.Message):
    data = await db.order_meals(message.from_user.id)

    response = "<b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n\n"
    for row in data:
        meal = await db.select_meal(meal_id=row['meal_id'])
        name = meal[2]

        response += f"<b>ID:</b> {row['meal_id']}\n" + \
        f"<b>–ò–º—è:</b> {name}\n" + \
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row['amount_sum']}\n" + \
        f"<b>–¶–µ–Ω–∞ –±–ª—é–¥–∞ –∑–∞ —à—Ç—É–∫—É:</b> {row['real_price']}\n" + \
        f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {row['total_cost_sum']} {row['info']}\n\n"

    await OrderingState.basket.set()
    await message.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(response, reply_markup=ordering.basket_kb)


@dp.message_handler(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', state=OrderingState.pre_check)
async def save_location(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    latitude = data.get('latitude')
    longitude = data.get('longitude')

    address = data.get('address')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.save_location(message.from_user.id, address, latitude, longitude)

    await pre_check(message, state)


@dp.message_handler(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', state=OrderingState.pre_check)
async def confirm_location(message: types.Message, state: FSMContext):
    await message.answer(
        "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.</b>"
        "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É?", reply_markup=types.ReplyKeyboardRemove()
    )    
    await pre_check(message, state)


@dp.message_handler(state=OrderingState.pre_check)
async def location_as_text(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(
        "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.</b>"
        "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É?", reply_markup=types.ReplyKeyboardRemove()
    )    
    await pre_check(message, state)


@dp.callback_query_handler(text='accept', state=OrderingState.order)
async def order(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    info = data.get('info')
    total_cost = data.get('total_cost')
    telegram_id = data.get('telegram_id')
    
    order = await db.create_order(info, (total_cost + 20000), telegram_id)
    await state.update_data(order_id=order[0])
    await db.clean_basket(telegram_id)

    managers = await db.manager_id_list()

    if managers:
        await call.message.edit_text(
            "<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!</b>",
            reply_markup=None
        )
        await asyncio.sleep(1)
        await call.message.answer(
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ‚ù§Ô∏è",
            reply_markup=main_menu.kb
        )

        process_order_kb = await ordering.enter_order_processing(order[0])

        try:
            for manager in managers:
                await bot.send_message(
                    chat_id=manager['telegram_id'],
                    text="ü§ë <b>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>",
                    reply_markup=process_order_kb
                )
                await asyncio.sleep(.05)
        except Exception:
            pass
    else:
        admins = await db.admin_id_list()
        try:
            for admin in admins:
                await bot.send_message(
                    chat_id=admin['telegram_id'],
                    text="<b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!</b>"
                )
                await asyncio.sleep(.05)
        except Exception:
            pass

    await state.finish()
